import json
import os
import sys
import re
import requests

from dotenv import load_dotenv
from tenable.sc import TenableSC

load_dotenv()

sc_host = '127.0.0.1'
sc_port = 8443
access_key = os.getenv('SC_ACCESS_KEY')
secret_key = os.getenv('SC_SECRET_KEY')


def download_known_exploited():
    try:
        url = 'https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json'
        result = requests.get(url)
    except Exception as e:
        print(f'error downloading file: {url}')
        sys.exit(e)
    return result.json()


def create_or_update_query(known_exploited):
    # create query description
    title = known_exploited['title']
    version = known_exploited['catalogVersion']
    count = known_exploited['count']
    description = f'{title}\nversion: {version}\ncount: {count}'

    # crete query cve filter
    cve_list = ','.join([v['cveID'] for v in known_exploited['vulnerabilities']])
    filters = [('cveID', '=', cve_list)]

    # look for existing query
    sc = TenableSC(host=sc_host, port=sc_port, access_key=access_key, secret_key=secret_key)
    queries = sc.queries.list()['usable']

    # check for existance of query with 'title'
    queries = {query['name']: query for query in queries}
    query = queries.get(title)

    if query is None:
        # create new query
        result = sc.queries.create(title, 'vulndetails', 'vuln', *filters, description=description)
        print("--> creating query: ")
        print(description)
    else:
        # update existing query
        query_id = query['id']
        print(f"updating query[id={query_id}]: {query['name']}")
        result = sc.queries.edit(query_id, *filters, description=description)


def list_queries(regex=None):
    sc = TenableSC(host=sc_host, port=sc_port, access_key=access_key, secret_key=secret_key)
    queries = sc.queries.list()['usable']
    return [query for query in queries if regex is not None and re.match(regex, query['name'], re.IGNORECASE)]


def main():

    data=download_known_exploited()
    # with open('known_exploited_vulnerabilites.json') as f:
        #  data = json.loads(f.read())

    try:
        create_or_update_query(data)
    except Exception as e:
        sys.exit(e)


if __name__ == '__main__':
    main()

    
    # queries = list_queries(regex='Test')
    # print(queries[0])
    # pprint(queries[0])